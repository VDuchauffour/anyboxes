[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "anyboxes"
description = "Lightweight package for managing bounding boxes that works seamlessly with most computing frameworks."
readme = "README.md"
authors = [
  { name = "Vincent Duchauffour", email = "vincent.duchauffour@proton.me" },
]
license = { file = "LICENSE" }
keywords = ["computer vision", "machine learning", "bounding boxes"]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Intended Audience :: Developers",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Framework :: Pytest",
]
requires-python = ">=3.8"
dynamic = ["version"]
dependencies = ["numpy>=1.21"]

[project.optional-dependencies]
torch = ["torch"]
jax = ["jax"]
tensorflow = ["tensorflow"]
all = ["anyboxes[torch]", "anyboxes[jax]", "anyboxes[tensorflow]"]
dev = [
  "pre-commit",
  "black",
  "isort",
  "ruff",
  "mypy",
  "pyright",
  "docformatter",
  "interrogate",
  "pytest",
  "pytest-cov",
]

[project.urls]
Homepage = "https://github.com/VDuchauffour/anyboxes"
Source = "https://github.com/VDuchauffour/anyboxes"
Tracker = "https://github.com/VDuchauffour/anyboxes/issues"

[tool.setuptools_scm]
write_to = "src/anyboxes/_version.py"

[tool.setuptools.package-data]
"*" = ["py.typed"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
select = [
  # pycodestyle
  "E",
  # pyflakes
  "F",
  # pydocstyle
  "D",
  # flake8-bandit
  "S",
  # pyupgrade
  "UP",
  # pep8-naming
  "N",
]
# Error E501 (Line too long) is ignored because of docstrings.
ignore = [
  "S101",
  "S301",
  "S311",
  "D100",
  "D200",
  "D203",
  "D205",
  "D401",
  "E501",
]
extend-exclude = ["examples/*.py", "test/*.py", "tests/*.py", "setup.py"]
target-version = "py38"
force-exclude = true

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
ignore_missing_imports = true

[tool.black]
preview = true
target-version = ['py38', 'py39', 'py310', 'py311']

[tool.isort]
profile = "black"
filter_files = true
known_first_party = ["anyboxes", "anyboxes.*"]

[tool.docformatter]
close-quotes-on-newline = true # D209

[tool.interrogate]
fail-under = 80
ignore-module = true
ignore-nested-functions = true
ignore-private = true
exclude = ["examples", "docs", "test", "tests", "setup.py"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov=anyboxes --cov-report=term --cov-report=xml --cov-report=html"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
omit = [
  "*docs*",
  "*stubs*",
  "*examples*",
  "*tests*",
  "src/anyboxes/_version.py",
  "src/anyboxes/implementations/torch/_typing.py",
]

[tool.coverage.report]
fail_under = 80
show_missing = true
ignore_errors = true
omit = [
  "*docs*",
  "*stubs*",
  "*examples*",
  "*tests*",
  "src/anyboxes/_version.py",
  "src/anyboxes/implementations/torch/_typing.py",
]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "except ImportError:",
  "Protocol",
  "@(abc.)?abstractmethod",
  "ModuleNotFoundError",
]
